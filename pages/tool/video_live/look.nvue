<template>
	<view>
		<video
			:style="'height: '+(emulator_Height)+'rpx;  width:750rpx;'"
			object-fit="fill"
			:src="row.pull_url"
			:autoplay="true"
			:loop="true"
			:controls="false"
			:show-play-btn="false"
			:enable-progress-gesture="false"
		></video>
		<view class="top">
			<view class="author">
				<view class="author-l">
					<image class="author-l-head" :src="anchorInfo.avatar"></image>
					<view class="author-l-info">
						<text class="author-l-info-name">{{anchorInfo.nickname}}</text>
						<text class="author-l-info-zan">520本场点赞</text>
					</view>
				</view>
				<text class="author-r" @click="userFollow()">{{isFollow == 0 ? '关注' : '已关注'}}</text>
			</view>
			<view class="user">
				<image class="user-head" v-for="(item,index) in firstList" :src="item.avatar"></image>
				<text class="user-num">{{userNum}}</text>
				<image class="user-close" src="../../../static/images/live_close.png" @click="closePage()"></image>
			</view>
		</view>
		<scroll-view class="msgs" id="msgs" :scroll-y="true" :show-scrollbar="false">
			<view class="msg" v-for="(item, index) in msgAll">
				<!-- 用户发送消息 -->
				<text class="uname" v-if="item.type == 'msg'">{{item.nickname}}：</text>
				<text class="umsg" v-if="item.type == 'msg'">{{item.msg}}</text>
				<!-- 用户加入直播间 -->
				<text class="enter-msg" v-if="item.type == 'enter'">{{item.msg}}</text>
				<!-- 用户退出直播间 -->
				<text class="logout-msg" v-if="item.type == 'logout'">{{item.msg}}</text>
				<!-- 用户赠送礼物 -->
				<text class="uname" v-if="item.type == 'gift'">{{item.nickname}}：赠送 </text>
				<text class="gift-msg" v-if="item.type == 'gift'">{{item.msg}}</text>
			</view>
		</scroll-view>
		<view class="bottom">
			<view class="bottom-l">
				<input class="bottom-l-l" type="text" :value="msg" v-model="msg" placeholder="说点什么" placeholder-style="color:#FFFFFF;" />
				<image class="bottom-l-r" src="../../../static/images/yuyin.png" @click="sendMessage()"></image>
			</view>
			<view class="bottom-r">
				<view class="bottom-r-i">
					<image class="bottom-r-l-img" src="../../../static/images/live_zf.png"></image>
				</view>
				<view class="bottom-r-i" @click="showBox(true)">
					<image class="bottom-r-r-img" src="../../../static/images/live_lw.png"></image>
				</view>
			</view>
		</view>
		<view class="box-mb" v-if="box" @click="showBox(false)"></view>
		<view class="box" v-if="box">
			<view class="box-t">
				<text class="box-tt">直播礼物</text>
			</view>
			<view class="box-c" v-if="box_tab == 1">
				<swiper class="box-c-swiper">
					<swiper-item v-for="(item, index) in gifts">
						<view class="swiper-item">
							<view :class="'box-c-swiper-item'+(gift_id==val.id ? ' box-c-swiper-item-curr' : '')" v-for="(val, key) in item" @click="selectGift(val.id)">
								<image class="box-c-swiper-item-img" :src="val.image"></image>
								<text class="box-c-swiper-item-name">{{val.name}}</text>
								<view class="row">
									<text class="box-c-swiper-item-yy" v-if="val.yinbei != null">{{val.yinbei}}音贝</text>
									<text class="box-c-swiper-item-yy" v-if="val.yinbei != null && val.yinzhu != null"> | </text>
									<text class="box-c-swiper-item-yy" v-if="val.yinzhu != null">{{val.yinzhu}}音铢</text>
								</view>
								<view class="row">
									<text class="box-c-swiper-item-yy" v-if="val.yinbao != null">{{val.yinbao}}音宝</text>
								</view>
							</view>
						</view>
					</swiper-item>
				</swiper>
			</view>
			<view class="box-c" v-if="box_tab == 2">表情</view>
			<view class="box-c" v-if="box_tab == 3">特效</view>
			<view class="box-b">
				<view class="tabs">
					<text :class="'tab '+(box_tab == 1 ? 'tab-curr' : '')" @click="switchBox(1)">礼物</text>
					<text :class="'tab '+(box_tab == 2 ? 'tab-curr' : '')" @click="switchBox(2)">表情</text>
					<text :class="'tab '+(box_tab == 3 ? 'tab-curr' : '')" @click="switchBox(3)">特效</text>
				</view>
				<view class="box-btns">
					<text class="box-btn">充值</text>
					<text class="box-btn" @click="give()">赠送</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import store from '../../../store';
	import {
		getDemandForm,
		getLiveRoomDetail,
		getGift,
		userFollow,
		giveGift
	} from '@/api/liveApp.js';
	export default {
		data() {
			return {
				emulator_Height: 0,
				// 直播间详情
				row: '',
				// 礼物框
				box: false,
				box_tab: 1,
				// 主播信息
				anchorInfo: '',
				// 当前观看人信息
				userInfo: '',
				// 是否关注该主播
				isFollow: 0,
				// 直播间人数
				userNum: 0,
				// 榜单列表
				firstList: [],
				// 心跳
				ping: '',
				// 礼物列表
				gifts: [],
				// 消息列表
				msgAll: [],
				// 聊天框消息
				msg: '',
				// 选中礼物
				gift_id: ''
			}
		},
		onLoad(options) {
			var _this = this;
			// 获取屏幕高度
			uni.getSystemInfo({
				success: function(res) {
					_this.emulator_Height = (res.screenHeight * (750 / res.windowWidth)) //将px 转换rpx
				}
			});
			// 获取礼物
			getGift({}).then(res => {
				_this.gifts = res.data.list;
			})
			// 获取直播间详情信息
			var data = {
				id: options.id,
				uid: uni.getStorageSync('uid')
			}
			// 直播间详情
			getLiveRoomDetail(data).then(res=> {
				_this.row = res.data.row;
				_this.src = res.data.row.pull_url;
				_this.anchorInfo = res.data.anchorInfo;
				_this.userInfo = res.data.userInfo;
				_this.isFollow = res.data.isFollow ? 1 : 0;
				
				uni.onSocketOpen(function (res) {
					console.log('WebSocket连接已打开！');
					// 发送进入聊天室提醒
					_this.send('enter', '{"roomId":"'+_this.row.id+'","nickname":"'+_this.userInfo.nickname+'", "uid":'+_this.userInfo.uid+'}')
				});
			})
		},
		onReady() {
			var _this = this;
			// 保持屏幕常亮
			uni.setKeepScreenOn({
			    keepScreenOn: true
			});
			// 连接websocket
			uni.connectSocket({
			    url: 'ws://39.106.196.170:20196'
			});
			// uni.onSocketOpen(function (res) {
			// 	console.log('WebSocket连接已打开！');
			// 	// 发送进入聊天室提醒
			// 	_this.send('enter', '{"roomId":"'+_this.row.id+'","nickname":"'+_this.userInfo.nickname+'", "uid":'+_this.userInfo.uid+'}')
			// 	// 开启心跳监听
			// 	_this.heartbeat()
			// });
			uni.onSocketError(function (res) {
				uni.showLoading({
					title: '断线重连中...'
				})
				// 请求重新连接
				clearInterval(_this.ping)	//关闭心跳检测
				var reconnect = setInterval(function (){
					uni.connectSocket({
					    url: 'ws://39.106.196.170:20196',
						success() {
							// 重连成功
							clearInterval(reconnect) //关闭重连
							_this.heartbeat()	//重新开启心跳
							uni.hideLoading()	//隐藏加载框
						}
					});
				}, 2000)
			});
			uni.onSocketMessage(function (res) {
				var datas = JSON.parse(res.data);
				
				console.log(datas);
				switch(datas.type) {
					// 主播关闭直播
					case 'endLive':
						var msgData = JSON.parse(datas.data);
						uni.showToast({
							title: msgData.msg,
							icon: 'none'
						})
						uni.switchTab({
							url: '/pages/index/index'
						})
					break;
					// 加入直播间
				    case 'enter':
						_this.msgAll.push(JSON.parse(datas.data));
				    break;
					// 退出直播间
				    case 'logout':
				        _this.msgAll.push(JSON.parse(datas.data));
				    break;
					// 聊天室消息
					case 'msg':
					    _this.msgAll.push(JSON.parse(datas.data));
					break;
					// 刷礼物
					case 'gift':
						_this.msgAll.push(JSON.parse(datas.data));
					break;
					// 心跳检测
					case 'ping':
						// console.log('pong')
					break;
					// 观看人数
					case 'userNum':
						_this.userNum = datas.data;
					break;
					// 榜单信息
					case 'firstList':
						_this.firstList = JSON.parse(datas.data);
						console.log(_this.firstList);
					break;
				}
			})
			// 开启心跳监听
			_this.heartbeat()
		},
		// 退出直播间
		// onUnload() {
		// 	this.send('logout', '{"roomId":"1", "msg":"xxx退出了"}')
		// 	uni.closeSocket();
		// 	uni.onSocketClose(function (res) {
		// 		console.log('WebSocket 已关闭！');
		// 	});
		// },
		methods: {
			// 退出直播间
			closePage() {
				// 关闭心跳检测
				clearInterval(this.ping)
				// 退出聊天室
				this.send('logout', '{"roomId":"'+this.row.id+'","nickname":"'+this.userInfo.nickname+'", "uid":'+this.userInfo.uid+'}')
				// 关闭websocket
				uni.closeSocket();
				// 返回上一页
				uni.navigateBack({
					delta: 1
				})
			},
			// 打开底部盒子
			showBox(bool) {
				this.box = bool;
			},
			// 切换底部盒子
			switchBox(box) {
				this.box_tab = box;
			},
			// 用户关注/取消关注
			userFollow() {
				var _this = this;
				var operation = (_this.isFollow == 1) ? 0 : 1;
				var data = {
					uid: uni.getStorageSync('uid'),
					to_user_id: _this.row.anchor_id,
					operation: operation
				};
				userFollow(data).then(res=>{
					_this.isFollow = operation;
				})
			},
			// 选中礼物
			selectGift(id) {
				this.gift_id = id;
			},
			// 赠送礼物
			give() {
				if(this.gift_id == '') {
					uni.showToast({
						title: '请选择礼物',
						icon: 'none'
					})
					return false;
				}
				var data = {
					uid: this.userInfo.uid,
					avatar: this.userInfo.avatar,
					gift_id: this.gift_id,
					anchor_id: this.row.anchor_id,
					room_id: this.row.id
				};
				var _this = this;
				giveGift(data).then(res => {
					uni.showToast({
						title: res.msg,
						icon: 'none'
					})
					if(res.status == 200) {
						// 关闭礼物框
						_this.box = false;
						// 发送礼物赠送提醒
						_this.send('gift', '{"roomId":"'+_this.row.id+'","msg": "'+res.data.gift_name+'","gift_id":'+_this.gift_id+',"nickname":"'+_this.userInfo.nickname+'", "uid":'+_this.userInfo.uid+'}')
					}
				})
			},
			// 心跳检测,两秒一次
			heartbeat() {
				var _this = this;
				_this.ping = setInterval(function(){
					_this.send('ping', '{"roomId":"'+_this.row.id+'", "msg":"心跳检测", "uid":'+_this.userInfo.uid+'}')
				}, 2000)
			},
			// 提交聊天内容
			sendMessage() {
				if(this.msg == '') {
					uni.showToast({
						title: '请输入聊天内容',
						icon: 'none'
					})
					return false;
				}
				// 提交聊天内容并清空输入内容
				this.send('msg', '{"roomId":"'+this.row.id+'", "msg":"'+this.msg+'", "nickname":"'+this.userInfo.nickname+'", "uid":'+this.userInfo.uid+'}');
			},
			send(type, data) {
				var _this = this;
				var data = JSON.stringify(data);
				uni.sendSocketMessage({
					data: '{"type":"'+type+'","data":'+data+'}',
					success() {
						if(type == 'msg') {
							_this.msg = '';	//清空输入框内容
						}
					}
				})
			}
		}
	}
</script>

<style>
	@import "./look.css";
</style>
