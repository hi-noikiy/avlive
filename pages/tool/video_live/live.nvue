<template>
	<view>
		<!-- #ifdef APP-NVUE -->
		<live-pusher id='livePusher' ref="livePusher" class="livePusher"
		:url="push_url"
		:style="{height: windowHeight+'px',width:windowidth + 'px'}"
		mode="FHD" :muted="true" :enable-camera="true" :auto-focus="true" :beauty="beauty_rating" :whiteness="beauty_rating"
		aspect="9:16" @statechange="statechange" @netstatus="netstatus" @error = "error"
		></live-pusher>
		<!-- #endif -->
		<view class="top">
			<view class="user">
				<image class="user-head" v-for="(item,index) in firstList" :src="item.avatar"></image>
				<text class="user-num">{{userNum}}</text>
				<image class="user-close" src="../../../static/images/live_close.png" @click="stop()"></image>
			</view>
		</view>
		<scroll-view class="msgs" id="msgs" :scroll-y="true" :show-scrollbar="false">
			<view class="msg" @click="star()">
				<text class="umsg">点此开始直播!</text>
			</view>
			<view class="msg" v-for="(item, index) in msgAll">
				<!-- 用户发送消息 -->
				<text class="uname" v-if="item.type == 'msg'">{{item.nickname}}：</text>
				<text class="umsg" v-if="item.type == 'msg'">{{item.msg}}</text>
				<!-- 用户加入直播间 -->
				<text class="enter-msg" v-if="item.type == 'enter'">{{item.msg}}</text>
				<!-- 用户退出直播间 -->
				<text class="logout-msg" v-if="item.type == 'logout'">{{item.msg}}</text>
				<!-- 用户赠送礼物 -->
				<text class="uname" v-if="item.type == 'gift'">{{item.nickname}}：赠送了 </text>
				<text class="gift-msg" v-if="item.type == 'gift'">{{item.msg}}</text>
			</view>
		</scroll-view>
	</view>
</template>

<script>
	import store from '../../../store';
	import {
		stopLiveRoom
	} from '@/api/liveApp.js';
	export default {
		data() {
			return {
				context: '',
				// 美颜等级
				beauty_rating: 0,
				// 直播间id
				id: '',
				// 当前用户id
				uid: '',
				// 推流地址
				push_url: '',
				// 心跳监听
				ping: '',
				// 直播间人数
				userNum: 0,
				// 榜单列表
				firstList: [],
				// 消息列表
				msgAll: [],
				msg: '',
				windowHeight:""
			}
		},
		onLoad(options) {
			this.id = options.id;
			this.push_url = options.push_url;
			this.uid = options.uid;
			this.beauty_rating = options.beauty_rating;
			uni.getSystemInfo({
				success: res => {
					console.log("屏幕",res)
					this.windowHeight = res.windowHeight
					this.windowidth = res.windowWidth
				}
			});
		},
		onReady() {
			// 保持屏幕常亮
			uni.setKeepScreenOn({
				keepScreenOn: true
			});
			
			var _this = this;
			
			uni.connectSocket({
				url: 'ws://39.106.196.170:20196'
			});
			uni.onSocketOpen(function (res) {
				console.log('WebSocket连接已打开！');
			});
			uni.onSocketError(function (res) {
			  console.log('WebSocket连接打开失败，请检查！');
			});
			uni.onSocketMessage(function (res) {
				var datas = JSON.parse(res.data);
				// var msgData = JSON.parse(datas.data);
				console.log(res.data)
				// console.log(datas);
				// console.log(msgData);
				switch(datas.type) {
					// 有人加入直播间
					case 'enter':
						_this.msgAll.push(JSON.parse(datas.data));
					break;
					// 有人退出直播间
					case 'logout':
						_this.msgAll.push(JSON.parse(datas.data));
					break;
					// 直播间消息
					case 'msg':
						_this.msgAll.push(JSON.parse(datas.data));
					break;
					// 直播间礼物
					case 'gift':
						_this.msgAll.push(JSON.parse(datas.data));
					break;
					// 主播心跳检测
					case 'ping':
						// console.log('pong')
					break;
					// 直播间观看数量
					case 'userNum':
						_this.userNum = datas.data;
					break;
					// 榜单信息
					case 'firstList':
						_this.firstList = JSON.parse(datas.data);
						console.log(_this.firstList);
					break;
				}
			});
			
			// 注意：需要在onReady中 或 onLoad 延时
			this.context = uni.createLivePusherContext("livePusher", this);
			// 开启摄像头预览
			this.context.startPreview({
			    success: (a) => {
			        console.log("livePusher.startPreview:" + JSON.stringify(a));
			    }
			});
		},
		methods: {
			// 开始直播
			star(){
				// 开始推流
				this.context.start({
					success: (a) => {
						console.log("livePusher.start:" + JSON.stringify(a));
					},
					fail: (err) => {
						console.log('fail')
					}
				})
				// 开启心跳
				this.heartbeat()
				// 开启直播
				console.log('开始直播');
				this.send('startLive', '{"roomId":"'+this.id+'","msg":"开始直播","uid":'+this.uid+'}')
			},
			statechange(e) {
			    // console.log("statechange:" + JSON.stringify(e));
			},
			netstatus(e) {
			    // console.log("netstatus:" + JSON.stringify(e));
			},
			error(e) {
			    console.log("error:" + JSON.stringify(e));
			},
			onUnload() {
				// uni.closeSocket();
			},
			// 心跳检测,两秒一次
			heartbeat() {
				var _this = this;
				_this.ping = setInterval(function(){
					_this.send('ping', '{"roomId":"'+_this.id+'","msg":"心跳检测","uid":'+_this.uid+'}')
				}, 2000)
			},
			close() {
			    this.context.close({
			        success: (a) => {
			            console.log("livePusher.close:" + JSON.stringify(a));
			        }
			    });
			},
			stop() {
				var _this = this;
				stopLiveRoom({
					id: _this.id
				}).then(res => {
					_this.send('endLive', '{"roomId":"'+_this.id+'","msg":"下播","uid":'+_this.uid+'}')
					// 关闭websocket
					uni.closeSocket();
					uni.onSocketClose(function () {
						console.log('直播已关闭');
					});
					// 停止推流
					this.context.stop({
					    success: (a) => {
					        console.log(JSON.stringify(a));
					    }
					});
					// 返回到个人中心页面
					uni.navigateBack({
						delta:1
					})
				});
			},
			send(type, data) {
				var data = JSON.stringify(data);
				uni.sendSocketMessage({
					data: '{"type":"'+type+'","data":'+data+'}'
				})
			}
			
			
		}
	}
</script>

<style>
	@import "./live.css";
</style>
